{% extends 'modals/base.twig' %}

{% set heading = popuporder_heading_title %}
{% if (minimum > 1) %} 
	{% set attention = text_minimum %}
{% endif %} 

{% block content %}
	<form method="post" enctype="multipart/form-data" id="purchase-form">
		<input name="product_id" value="{{ product_id }}" style="display: none;" type="hidden" />
		<input class="product_max" value="{{ quantity }}" style="display: none;" type="hidden" />
		<table class="display-products-cart porder">
			<tbody>
				<tr>
					<td class="image">
						{% if (thumb) %} 
							<img src="{{ thumb }}" title="{{ popuporder_heading_title }}" alt="{{ popuporder_heading_title }}" />
						{% endif %} 
					</td>
					<td class="name">
						{{ product_name }} 
						{% if (discounts and not special) %} 
							<div class="discounts">
								{% for discount in discounts %} 
									<span>{{ discount['quantity'] }}{{ text_discount }}{{ discount['price'] }}</span><br/>
								{% endfor %} 
							</div>
						{% endif %} 
					</td>
					<td class="qt">
						{% if (not stock_warning or zakaz) %} 
      	  {% include 'product/partials/change_quantity.twig' with {'product_id': product_id,
      	                                                           'quantity': minimum,
      	                                                           'min_quantity': minimum} %}
      	    {#}
						<div class="number">
		          <input name="product_id" value="{{ product_id }}" style="display: none;" type="hidden" />
							<div class="frame-change-count">
						<div class="btn-plus">
							<button type="button" data-action="+">+</button>
						</div>
						<div class="btn-minus">
							<button type="button" data-action="-">-</button>
						</div>
					</div>
							<input name="quantity" value="{{ minimum }}"  class="all_quantity plus-minus" onkeyup="validate_pole_popuporder(this);" onchange="validate_pole_popuporder(this);" />
						</div>
      	    {#}
						{% endif %} 
					</td>
					<td class="totals">
        {% if (not special) %}
          <span class="update_price">{{ price }}</span>
          <span class="update_special dnone"></span>
        {% else %}
          <span class="update_special price-new">{{ special }}</span>
          <span class="update_price price-old">{{ price }}</span>
        {% endif %}
					</td>
				</tr>
			</tbody>
		</table>
		<div class="mobile-products-cart">
			<div>
			<div class="image">
				{% if (thumb) %} 
					<img src="{{ thumb }}" title="{{ popuporder_heading_title }}" alt="{{ popuporder_heading_title }}" />
				{% endif %} 
			</div>
			<div class="name">
				{{ product_name }} 
				{% if (discounts and not special) %} 
					<div class="discounts">
						{% for discount in discounts %} 
							<span>{{ discount['quantity'] }}{{ text_discount }}{{ discount['price'] }}</span><br/>
						{% endfor %} 
					</div>
				{% endif %} 
			</div>
			<div class="qt">
				{% if (not stock_warning or zakaz) %} 
				<div class="number">
					<div class="frame-change-count">
						<div class="btn-plus">
							<button type="button" data-action="+">+</button>
						</div>
						<div class="btn-minus">
							<button type="button" data-action="-">-</button>
						</div>
					</div>
					<input name="quantity" value="{{ minimum }}"  class="all_quantity plus-minus" onkeyup="validate_pole_popuporder(this);" onchange="validate_pole_popuporder(this);" />
				</div>
				{% endif %} 
			</div>
			<div class="totals">
        {% if (not special) %}
          <span class="update_price">{{ price }}</span>
          <span class="update_special dnone"></span>
        {% else %}
          <span class="update_special price-new">{{ special }}</span>
          <span class="update_price price-old">{{ price }}</span>
        {% endif %}


{#}
				{% if (not special) %} 
					<span id="main-price" class="mobi">{{ price }}</span>
				{% else %} 
					<span id="main-price" class="mobi spec">{{ price }}</span>
					<span id="special-price" class="mobi">{{ special }}</span>
				{% endif %} 
{#}
			</div>		
			</div>
		</div>

    <div class="well well-sm product-info product_informationss">
    {% include 'revolution/template/product/partials/product_options.twig' %}
    </div>
		{% include 'partials/form.twig' with {'form_settings': revtheme_catalog_popuporder} %}
	</form>
{% endblock %}

{% block footer %}
  <button class="continue-shopping" data-action="close">{{ button_shopping }}</button>
		{% if (not stock_warning or zakaz) %} 
			<a id="popup-checkout-button" data-action="submit">{{ button_checkout }}</a>
		{% endif %} 

{#}

  // Валидация поля количества
  // const validateQuantityInput = (input, action) => {
  function window.validate_pole_popuporder = function(input, action) {
    input.value = input.value.replace(/[^\d,]/g, '');
    const maxInput = document.querySelector('input.product_max');
    const maxValue = maxInput ? parseInt(maxInput.value) : 9999;
    const minValue = {{ minimum }};
    
    if (input.value === '') input.value = minValue;
    
    const quantityInput = document.querySelector('input.all_quantity');
    if (!quantityInput) return;
    
    let quantity = parseInt(quantityInput.value) || minValue;

    {% if (q_zavisimost) %}
      if (action === '+' && quantity < maxValue) {
        quantity++;
      } else if (action === '-' && quantity > minValue) {
        quantity--;
      } else if (action === '=' && quantity < maxValue) {
        // Ничего не меняем
      }

      if (quantity < 1 || quantity < minValue) {
        quantity = minValue;
      } else if (quantity > maxValue) {
        quantity = maxValue;
      }
    {% else %}
      if (action === '+') {
        quantity++;
      } else if (action === '-' && quantity > minValue) {
        quantity--;
      }

      if (quantity < 1 || quantity < minValue) {
        quantity = minValue;
      }
    {% endif %}

    quantityInput.value = quantity;
    input.value = quantity;
    updateProductPrices(quantity);
  };

  // Обновление цен товара
  const updateProductPrices = async (quantity) => {
    const form = document.getElementById('purchase-form');
    if (!form) return;

    const formData = new FormData();
    
    // Собираем данные формы
    const fields = [
      'input[type="hidden"]',
      'input[type="text"]',
      'input[type="radio"]:checked',
      'input[type="checkbox"]:checked',
      'select',
      'textarea'
    ];

    fields.forEach(selector => {
      form.querySelectorAll(selector).forEach(field => {
        if (field.name) {
          if (field.multiple) {
            Array.from(field.selectedOptions).forEach(option => {
              formData.append(`${field.name}[]`, option.value);
            });
          } else {
            formData.append(field.name, field.value);
          }
        }
      });
    });

    formData.append('quantity', quantity);

    try {
      const response = await fetch('index.php?route=product/product/update_prices', {
        method: 'POST',
        body: formData
      });
      const data = await response.json();

      {% if (options) %}
        const image = form.querySelector('.image img');
        if (image && data.opt_image_2) {
          image.src = data.opt_image_2;
          image.style.width = '100px';
          image.style.height = '100px';
        }
      {% endif %}
      
      {% if (price_number > 0) %}
        {% if (discounts and not special) %}
          const price = data.special_n;
        {% else %}
          const price = data.price_n;
        {% endif %}
        
        {% if (revtheme_product_all['recalc_price_animate']) %}
          animatePriceChange('#main-price', price);
        {% else %}
          updatePriceDisplay('#main-price', price);
        {% endif %}
        
        {% if (special) %}
          const specialPrice = data.special_n;
          {% if (revtheme_product_all['recalc_price_animate']) %}
            animatePriceChange('#special-price', specialPrice);
          {% else %}
            updatePriceDisplay('#special-price', specialPrice);
          {% endif %}
        {% endif %}
      {% endif %}
    } catch (error) {
      console.error('Price update error:', error);
    }
  };

  // Анимация изменения цены
  const animatePriceChange = (selector, newPrice) => {
    const elements = document.querySelectorAll(`${selector}`);
    if (!elements.length) return;

    elements.forEach(el => {
      const startPrice = parseFloat(el.textContent.replace(/\s*/g, '') || 0;
      const duration = 500;
      const startTime = performance.now();
      
      const animate = (currentTime) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const currentValue = startPrice + (newPrice - startPrice) * progress;
        
        el.textContent = priceFormat(currentValue);
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        }
      };
      
      requestAnimationFrame(animate);
    });
  };

  // Обновление отображения цены без анимации
  const updatePriceDisplay = (selector, price) => {
    document.querySelectorAll(selector).forEach(el => {
      el.textContent = priceFormat(price);
    });
  };

  // Форматирование цены
  const priceFormat = (n) => {
    const c = {{ currency.decimals is empty ? 0 : currency.decimals }};
    const d = '{{ currency.decimal_point }}';
    const t = '{{ currency.thousand_point }}';
    const sLeft = '{{ currency.symbol_left }}';
    const sRight = '{{ currency.symbol_right }}';
    n = n * {{ currency.value }};
    
    let i = parseInt(n = Math.abs(n).toFixed(c)) + '';
    let j = (j = i.length) > 3 ? j % 3 : 0;
    
    return sLeft + (j ? i.substr(0, j) + t : '') + 
           i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + 
           (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '') + 
           sRight;
  };

  // Инициализация при загрузке страницы
  (async () => {
    await loadResources();
    initDateTimePickers();
    autoSelectOptions();
    initFileUpload();
    
    {% if (minimum > 1) %}
      updateProductPrices({{ minimum }});
    {% endif %}
  })();
}
// window.validate_pole_popuporder = validate_pole_popuporder;

// Инициализация после загрузки DOM
    
    // Обработчики для кнопок количества
    document.querySelectorAll('.number button').forEach(btn => {
      btn.addEventListener('click', function() {
        console.log('Button clicked'); // Проверка клика
        const action = this.getAttribute('data-action');
        const input = this.closest('.number').querySelector('input[type="text"]');
        if (input && action) {
          window.validate_pole_popuporder(input, action);
        }
      });
</script>
{% endif %}
{#}
{% endblock %}
