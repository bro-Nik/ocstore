{% extends 'revolution/template/product/partials/base.twig' %}

{% block container_schema %} itemtype="http://schema.org/ItemList" itemscope {% endblock %}
{% block content %}

  {% if (description and products) %}
    <div class="row category_description {{ category_description_class }}">
      {% if (thumb) %}
        <div class="fl-l"><img src="{{ thumb }}" alt="{{ heading_title }}" title="{{ heading_title }}" class="img-thumbnail"/></div>
      {% endif %}
      <div itemprop="description">{{ description }}</div>
    </div>
  {% endif %}

  {% if (categories) %}
    {% if (podcategory_status) %}

      {% if (podcategory_imgs) %}
        <div class="refine_categories clearfix">
          {% for category in categories %}
            <a class="" href="{{ category['href'] }}"><img src="{{ category['thumb'] }}" title="{{ category['name'] }}" alt="{{ category['name'] }}"/><span>{{ category['name'] }}</span>
            </a>
          {% endfor %}
        </div>
      {% else %}
        {% if (categories|length <= 5) %}
          <div class="row">
            <div class="col-sm-3">
              <ul>
                {% for category in categories %}
                  <li>
                    <a href="{{ category['href'] }}">{{ category['name'] }}</a>
                  </li>
                {% endfor %}
              </ul>
            </div>
          </div>
        {% else %}
          <div class="row">
            {% for category in categories|batch((categories|length / 4)|round(1, 'ceil')) %}
              <div class="col-sm-3">
                <ul>
                  {% for child in category %}
                    <li>
                      <a href="{{ child['href'] }}">{{ child['name'] }}</a>
                    </li>
                  {% endfor %}
                </ul>
              </div>
            {% endfor %}
          </div>
        {% endif %}
      {% endif %}
    {% else %}
      {% if (not products) %}
        {% if (podcategory_imgs) %}
          <div class="refine_categories clearfix">
            {% for category in categories %}
              <a class="col-xs-6 col-sm-4 col-md-3 col-lg-2" href="{{ category['href'] }}"><img src="{{ category['thumb'] }}" title="{{ category['name'] }}" alt="{{ category['name'] }}"/><span>{{ category['name'] }}</span>
              </a>
            {% endfor %}
          </div>
        {% else %}
          {% if (categories|length <= 5) %}
            <div class="row">
              <div class="col-sm-3">
                <ul>
                  {% for category in categories %}
                    <li>
                      <a href="{{ category['href'] }}">{{ category['name'] }}</a>
                    </li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% else %}
            <div class="row">
              {% for category in categories|batch((categories|length / 4)|round(1, 'ceil')) %}
                <div class="col-sm-3">
                  <ul>
                    {% for child in category %}
                      <li>
                        <a href="{{ child['href'] }}">{{ child['name'] }}</a>
                      </li>
                    {% endfor %}
                  </ul>
                </div>
              {% endfor %}
            </div>
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}


  {% if (products) %}
    <div class="revfilter_container">
      <meta itemprop="numberOfItems" content="{{ products|length }}"/>

      {% include 'revolution/template/product/partials/products_top_line.twig' %}

      <div class="products__list">
        {% for filter_gr,items in products %}
          {% if (filter_gr != '') %}
            <div class="filter_gr col-xs-12">
              <h4>{{ filter_gr|replace({'111': "---"}) }}</h4>
            </div>
          {% endif %}

          {% for product in items['products'] %}
            {% include 'revolution/template/product/partials/products_product.twig' %}
          {% endfor %}

        {% endfor %}
      </div>

      {% include 'revolution/template/product/partials/pagination.twig' %}

    </div>
  {% endif %}
  {% if (not categories and not products) %}
    <p>{{ text_empty }}</p>
  {% endif %}
  <div class="footer-category">
    {% if (description and not products) %}
      <div class="row category_description">
        {% if (thumb) %}
          <div class="fl-l"><img src="{{ thumb }}" alt="{{ heading_title }}" title="{{ heading_title }}" class="img-thumbnail"/></div>
        {% endif %}
        <div itemprop="description">{{ description }}</div>
      </div>
    {% endif %}
  </div>


{{ content_bottom }} 
{% endblock %}

{% block after_content %}
  {% include 'revolution/template/product/partials/viewed_products.twig' %}
{% endblock %}

{% block script %}
<script><!--
{% for brand,items in products %} 
{% for product in items['products'] %} {% if (product['minimum'] > 1 and recalc_price) %} 
	update_quantity({{ product['product_id'] }}, {{ product['minimum'] }});
{% endif %} {% endfor %} 
{% endfor %} 
function validate_pole(val, product_id, znak, minimumvalue, maximumvalue) {
	val.value = val.value.replace(/[^\d,]/g, '');
	if (val.value == '') val.value = minimumvalue;
	maximumvalue = Number($('.products_category .pr_quantity_'+product_id).text());
	if (maximumvalue < 1) maximumvalue = 9999;
	input_val = $('.products_category .product_'+product_id+' .plus-minus');	
	quantity = parseInt(input_val.val());
	{% if (q_zavisimost) %} 
	if(znak=='+' && input_val.val() < maximumvalue) input_val.val(quantity+1);
	else if(znak=='-' && input_val.val() > minimumvalue) input_val.val(quantity-1);
	else if(znak=='=' && input_val.val() < maximumvalue && input_val.val() < maximumvalue) input_val.val(input_val.val());
	if (quantity < 1 || quantity < minimumvalue) {
		input_val.val(minimumvalue);
		val.value = minimumvalue;
	} else if (quantity > maximumvalue) {
		input_val.val(maximumvalue);
		val.value = maximumvalue;
	}
	{% else %} 
	if(znak=='+') input_val.val(quantity+1);
	else if(znak=='-' && input_val.val() > minimumvalue) input_val.val(quantity-1);
	else if(znak=='=' && input_val.val() > minimumvalue) input_val.val(input_val.val());
	if (quantity < 1 || quantity < minimumvalue) {
		input_val.val(minimumvalue);
		val.value = minimumvalue;
	}
	{% endif %} 
	update_quantity(product_id, input_val.val());
}
function update_quantity(product_id, quantity) {
	{% if (recalc_price) %} 
		quantity = quantity;
	{% else %} 
		quantity = 1;
	{% endif %} 
	
	data = $('.products_category .product_'+product_id+' .options input[type=\'text\'], .products_category .product_'+product_id+' .options input[type=\'hidden\'], .products_category .product_'+product_id+' .options input[type=\'radio\']:checked, .products_category .product_'+product_id+' .options input[type=\'checkbox\']:checked, .products_category .product_'+product_id+' .options select');
	$.ajax({
	  url: 'index.php?route=product/product/update_prices',
	  type: 'post',
	  dataType: 'json',
	  data: data.serialize() + '&product_id=' + product_id + '&quantity=' + quantity,
	  success: function(json) {
		{% if (recalc_price) %} 

			{% if (description_options['zamena_description'] and description_options['weight']) %} 
				var weight = json['weight'];
				{% if (revtheme_product_all['recalc_price_animate']) %} 
					var start_weight = parseFloat($('.products_category .pr_weight_'+product_id).attr('data-weight'));
					$({val:start_weight}).animate({val:weight}, {
						duration: 500,
						easing: 'swing',
						step: function(val) {
							$('.products_category .pr_weight_'+product_id).html(weight_format(val, product_id));
						}
					});
					$('.products_category .pr_weight_'+product_id).attr('data-weight', json['weight']);
				{% else %} 
					$('.products_category .pr_weight_'+product_id).html(weight_format(weight, product_id));
				{% endif %} 
			{% endif %} 

			{% if (stikers_status) %} 
				var price = json['price_n'];
				{% if (revtheme_product_all['recalc_price_animate']) %} 
					var start_price = parseFloat($('.products_category .special_no_format'+product_id).html().replace(/\s*/g,''));
					$({val:start_price}).animate({val:price}, {
						duration: 500,
						easing: 'swing',
						step: function(val) {
							$('.products_category .special_no_format'+product_id).html(price_format(val));
						}
					});
				{% else %} 
					$('.products_category .special_no_format'+product_id).html(price_format(price));
				{% endif %} 
			{% endif %} 
			
			
			var special = json['special_n'];
			{% if (revtheme_product_all['recalc_price_animate']) %} 
				var start_special = parseFloat($('.products_category .price_no_format'+product_id).html().replace(/\s*/g,''));
				$({val:start_special}).animate({val:special}, {
					duration: 500,
					easing: 'swing',
					step: function(val) {
						$('.products_category .price_no_format'+product_id).html(price_format(val));
					}
				});
			{% else %} 
				$('.products_category .price_no_format'+product_id).html(price_format(special));
			{% endif %} 
		{% endif %} 
	  }
	});
}
function update_prices_product(product_id, minimumvalue) {
	input_val = $('.products_category .product_'+product_id+' .plus-minus').val();
	if (input_val > minimumvalue) {
		input_val = minimumvalue;
		$('.products_category .product_'+product_id+' .plus-minus').val(minimumvalue);
	}
	{% if (recalc_price) %} 
	quantity = parseInt(input_val);
	{% else %} 
	quantity = 1;
	{% endif %} 
	data = $('.products_category .product_'+product_id+' .options input[type=\'text\'], .products_category .product_'+product_id+' .options input[type=\'hidden\'], .products_category .product_'+product_id+' .options input[type=\'radio\']:checked, .products_category .product_'+product_id+' .options input[type=\'checkbox\']:checked, .products_category .product_'+product_id+' .options select');
	$.ajax({
	  type: 'post',
	  url:  'index.php?route=product/product/update_prices',
	  data: data.serialize() + '&product_id=' + product_id + '&quantity=' + quantity,
	  dataType: 'json',
	  success: function(json) {
		 
		{% if (img_slider) %} 
		$('.products_category .product_'+product_id+' .image .owl-item:first-child img').attr('src', json['opt_image']);
		{% else %} 
		$('.products_category .product_'+product_id+' .image img').attr('src', json['opt_image']);
		{% endif %} 
		
		{% if (description_options['zamena_description'] and description_options['model']) %} 
		$('.products_category .product_'+product_id+' .pr_model_'+product_id).html(json['opt_model']);
		{% endif %} 
		
		var end_quantity = json['option_quantity'];
		{% if (revtheme_product_all['recalc_price_animate']) %} 
			var start_quantity = parseFloat($('.products_category .pr_quantity_'+product_id).html().replace(/\s*/g,''));
			$({val:start_quantity}).animate({val:end_quantity}, {
				duration: 500,
				easing: 'swing',
				step: function(val) {
					$('.products_category .pr_quantity_'+product_id).html(number_format(val, product_id));
				}
			});
		{% else %} 
			$('.products_category .pr_quantity_'+product_id).html(number_format(end_quantity, product_id));
		{% endif %} 
		
		{% if (description_options['zamena_description'] and description_options['weight']) %} 
			var weight = json['weight'];
			{% if (revtheme_product_all['recalc_price_animate']) %} 
				var start_weight = parseFloat($('.products_category .pr_weight_'+product_id).attr('data-weight'));
				$({val:start_weight}).animate({val:weight}, {
					duration: 500,
					easing: 'swing',
					step: function(val) {
						$('.products_category .pr_weight_'+product_id).html(weight_format(val, product_id));
					}
				});
				$('.products_category .pr_weight_'+product_id).attr('data-weight', json['weight']);
			{% else %} 
				$('.products_category .pr_weight_'+product_id).html(weight_format(weight, product_id));
			{% endif %} 
		{% endif %} 
	  
		{% if (stikers_status) %} 
			var price = json['price_n'];
			{% if (revtheme_product_all['recalc_price_animate']) %} 
				var start_price = parseFloat($('.products_category .special_no_format'+product_id).html().replace(/\s*/g,''));
				$({val:start_price}).animate({val:price}, {
					duration: 500,
					easing: 'swing',
					step: function(val) {
						$('.products_category .special_no_format'+product_id).html(price_format(val));
					}
				});
			{% else %} 
				$('.products_category .special_no_format'+product_id).html(price_format(price));
			{% endif %} 
		{% endif %} 
		
		var special = json['special_n'];
		{% if (revtheme_product_all['recalc_price_animate']) %} 
			var start_special = parseFloat($('.products_category .price_no_format'+product_id).html().replace(/\s*/g,''));
			$({val:start_special}).animate({val:special}, {
				duration: 500,
				easing: 'swing',
				step: function(val) {
					$('.products_category .price_no_format'+product_id).html(price_format(val));
				}
			});
		{% else %} 
			$('.products_category .price_no_format'+product_id).html(price_format(special));
		{% endif %} 
	  }
	});
}
function price_format(n) {
	c = {{ currency['decimals'] is empty ? "0" : currency['decimals'] }};
    d = '{{ currency['decimal_point'] }}';
    t = '{{ currency['thousand_point'] }}';
    s_left = '{{ currency['symbol_left'] }}';
    s_right = '{{ currency['symbol_right'] }}';
    n = n * {{ currency['value'] }};
    i = parseInt(n = Math.abs(n).toFixed(c)) + ''; 
    j = ((j = i.length) > 3) ? j % 3 : 0; 
    return s_left + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '') + s_right; 
}
function weight_format(n, product_id) {
    c = 2;
    d = '.';
    t = ',';
    i = parseInt(n = Math.abs(n).toFixed(c)) + ''; 
    j = ((j = i.length) > 3) ? j % 3 : 0; 
    return (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
}
function number_format(n, product_id) {
    i = parseInt(n = Math.abs(n).toFixed(0)) + ''; 
    return i;
}
--></script>
{% endblock %}
