{% extends 'revolution/template/product/partials/base.twig' %}

{% block container_schema %}{% endblock %}
{% block content %}

      <div class="row" itemscope itemtype="http://schema.org/Product">
        <meta itemprop="name" content="{{ heading_title }}"/>
        <meta itemprop="category" content="{{ breadcrumbsbreadcrumbs-2['text'] }}"/>
        {% if (column_left or column_right) %}
          {% set class2 = 'col-sm-9 col-md-6' %}
        {% else %}
          {% set class2 = 'col-sm-12 col-md-5' %}
        {% endif %}
        <div class="{{ class2 }} product_informationss">

		      {% include 'revolution/template/product/partials/stickers.twig' with {'main_product': 'true'} %}
		      {% include 'revolution/template/product/partials/product_images.twig' with {'images' : images} %}

        </div>
        {% if (column_left or column_right) %}
          {% set class3 = 'col-sm-12 col-md-6' %}
        {% else %}
          {% set class3 = 'col-sm-12 col-md-7' %}
        {% endif %}
        <div class="{{ class3 }} product_informationss">
          {% if (revtheme_product_all['h1_right']) %}
            <span class="pr_h1_block">
              <h1 class="inbreadcrumb">{{ mpn ?: heading_title }}</h1>
            </span>
          {% endif %}
          <meta itemprop="mpn" content="{{ model }}">
          {% if (revtheme_product_all['short_desc'] and short_description) %}
            <div class="short_description">{{ short_description }}</div>
          {% endif %}
          <ul class="product_list_top">
            {% if (bonusbals_status) %}
              {% if (reward) %}
                <li>
                  <span data-toggle="tooltip" data-placement="top" title="{{ text_product_bonus_tooltip }}">+
                    {{ reward }}
                    {{ text_product_bonusov }}</span>
                </li>
              {% endif %}
            {% endif %}
            {% if (manufacturer_status) %}
              {% if (manufacturer) %}
                <li>{{ text_manufacturer }}<a href="{{ manufacturers }}">
                    <span itemprop="brand" itemscope itemtype="https://schema.org/Brand"><meta itemprop="name"/>{{ manufacturer }}</span>
                  </a>
                </li>
              {% endif %}
            {% endif %}
            {% if (model_status) %}
              {% if (model != '') %}
                <li>{{ text_model }}<span>{{ model }}</span>
                </li>
              {% endif %}
            {% endif %}
            {% if (sku_status) %}
              {% if (sku != '') %}
                <li>{{ text_product_artikul }}<span>{{ sku }}</span>
                </li>
              {% endif %}
            {% endif %}
          </ul>
          {% if (review_status) %}
            {% if (reviews_number > 0) %}
              <span itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
                <meta itemprop="worstRating" content="1">
                <meta itemprop="bestRating" content="5">
                <meta itemprop="ratingValue" content="{{ rating }}">
                <meta itemprop="reviewCount" content="{{ reviews_number }}">
              </span>
            {% endif %}
            <div class="product_list_top2">
              {% if (rev_srav_prod) %}
                <div class="product-info">
                  <a class="{{ compare_class }} compare pjid_{{ product_id }} compare-toggle" data-toggle="tooltip" data-product-id="{{ product_id }}" data-brand="{{ brand }}">
                    <i class="fa fa-bar-chart-o"></i>
                    {#}
                    <span>{{ button_compare }}</span>
                    {#}
                    <span>Сравнить</span>
                  </a>
                </div>
              {% endif %}
              <div class="rating">
                {% set i = 1 %}
                {% for i in i..5 %}
                  {% if (rating < i) %}
                    <span class="fa fa-stack">
                      <i class="fa fa-star-o fa-stack-1x"></i>
                    </span>
                  {% else %}
                    <span class="fa fa-stack">
                      <i class="fa fa-star fa-stack-1x"></i>
                      <i class="fa fa-star-o fa-stack-1x"></i>
                    </span>
                  {% endif %}
                {% endfor %}
                {% if (revtheme_product_all['pr_tabs']) %}
                  <a class="adotted" onclick="$('a[href=\'#tab-review\']').trigger('click'); $('html, body').animate({ scrollTop: $('a[href=\'#tab-review\']').offset().top - 2}, 250); return false;">{{ reviews }}</a>
                {% else %}
                  <a class="adotted" onclick="$('html, body').animate({ scrollTop: $('.tab-review').offset().top - 70}, 250); return false;">{{ reviews }}</a>
                {% endif %}
              </div>
            </div>
          {% endif %}
          <div class="prod_list-unstyled">
            <ul class="list-unstyled">
                <li class="hidden pr_quantity">{{ quantity }}</li>

              {% if (not atributs) %}
                {% if (revtheme_product_all_attribute_group) %}
                  {% for attribute_group in attribute_groups %}
                    {% if (attribute_group['attribute_group_id'] in revtheme_product_all_attribute_group) %}
                      {% if (revtheme_product_all['atributs_all_limit'] is defined and revtheme_product_all['atributs_all_limit']) %}
                        {{ attribute_group['attribute']|slice(0, revtheme_product_all['atributs_all_limit']) }}
                      {% endif %}
                      {% for attribute in attribute_group['attribute'] %}
                        {% if (attribute['text'] != '') %}
                          <li class="dotted-line">{{ attribute['name'] }}:<span>{{ attribute['text'] }}</span>
                          </li>
                        {% endif %}
                      {% endfor %}
                    {% endif %}
                  {% endfor %}
                  {% if (atributs_ssilka_all and attribute_groups) %}
                    <li class="adotted_block">
                      {% if (revtheme_product_all['pr_tabs']) %}
                        <a class="adotted" onclick="$('a[href=\'#tab-specification\']').trigger('click'); $('html, body').animate({ scrollTop: $('a[href=\'#tab-specification\']').offset().top - 2}, 250); return false;">{{ text_product_all_attribs }}</a>
                      {% else %}
                        <a class="adotted" onclick="$('html, body').animate({ scrollTop: $('.tab-specification').offset().top - 70}, 250); return false;">{{ text_product_all_attribs }}</a>
                      {% endif %}
                    </li>
                  {% endif %}
                {% endif %}
              {% endif %}

              {% if (atributs) %}
                {% for attribute_group in attribute_groups %}
                  {% for attribute in attribute_group['attribute'] %}
                    {% if (attribute['text'] != '') %}
                      <li class="dotted-line" itemprop="additionalProperty" itemscope itemtype="http://schema.org/PropertyValue">
                        <div class="dotted-line_left">
                          <span class="dotted-line_title" itemprop="name">{{ attribute['name'] }}:</span>
                          <div class="dotted-line_line"></div>
                        </div>
                        <div class="dotted-line_right" itemprop="value">{{ attribute['text'] }}</div>
                      </li>
                    {% endif %}
                  {% endfor %}
                {% endfor %}
              {% endif %}
            </ul>
          </div>
          {% if (zakaz_price_null or price_number > 0) %}
            <div class="well well-sm product-info product_informationss">
              {% if (share_status) %}
                {{ share_status_code }}
              {% endif %}

      		  {% include 'revolution/template/product/partials/product_options.twig' %}

			{% if ((options and not revtheme_product_all['options_buy']) or not options_buy) %}
			{% if (recurrings) %}
			<hr>
			<h3>{{ text_payment_recurring }}</h3>
			<div class="form-group required">
  	  	  	  <select name="recurring_id" class="form-control">
    			<option value="">{{ text_select }}</option>
    			{% for recurring in recurrings %}
      	  	  	  <option value="{{ recurring['recurring_id'] }}">{{ recurring['name'] }}</option>
    			{% endfor %}
  	  	  	  </select>
  	  	  	  <div class="help-block" id="recurring-description"></div>
			</div>{% endif %}<div class="form-group pokupka">
			{% if (price) %}
  	  	  	  {% if (price_number > 0) %}
    			<div class="list-unstyled" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
      	  	  	  <meta itemprop="url" content="{{ breadcrumbs|last['href'] }}">
      	  	  	  {% if (special_end) %}
        			<meta itemprop="priceValidUntil" content="{{ special_end }}">
      	  	  	  {% else %}
        			<meta itemprop="priceValidUntil" content="{{ now|date_modify('+1 month')|date('Y-m-d') }}">
      	  	  	  {% endif %}
      	  	  	  {% if (not special) %}
        			<span class="update_price">{{ price }}</span>
        			{{ ed_izm ? '<span class="ed_izm">'~ed_izm~'</span>' : '' }}
        			<span class="update_special dnone"></span>
        			<meta itemprop="price" content="{{ price_number }}">
      	  	  	  {% else %}
        			<span class="update_special price-new">{{ special }}</span>
        			{{ ed_izm ? '<span class="ed_izm">'~ed_izm~'</span>' : '' }}
        			<meta itemprop="price" content="{{ special_number }}">
        			<span class="update_price price-old">{{ price }}</span>
        			{% if (special_end) %}
          	  	  	  <div class="countdown">{{ text_countdown }}
            			<span id="countdown"></span>
          	  	  	  </div>

						<script><!--
							function countdown_timer(){
								var names = {
								days:      JSON.parse(JSON.stringify({1:" день ", 2:" дня ", 3: " дней "})),
								hours:     JSON.parse(JSON.stringify({1:" час ", 2: " часа ", 3: " часов "})),
								minutes:   JSON.parse(JSON.stringify({1:" минута ", 2: " минуты ", 3: " минут "})),
								seconds:   JSON.parse(JSON.stringify({1:" секунда ", 2: " секунды ", 3: " секунд "})),
								};
								var day_name = names['days'][3];
								var hur_name = names['hours'][3];
								var min_name = names['minutes'][3];
								var sec_name = names['seconds'][3];
								var today = new Date();
								function parseDate(input) {
								var parts = input.match(/(\d+)/g);
								return new Date(parts[0], parts[1]-1, parts[2]);
								}
								var BigDay = parseDate('{{ special_end }}');
								var timeLeft = (BigDay.getTime() - today.getTime());
								var e_daysLeft = timeLeft / 86400000;
								var daysLeft = Math.floor(e_daysLeft);
								var slice_day = String(daysLeft).slice(-1);
								if(parseInt(slice_day) == 1 && (parseInt(daysLeft) < 10 || parseInt(daysLeft) > 20)){
									day_name = names['days'][1];
								}else if((parseInt(slice_day) == 2 || parseInt(slice_day) == 3 || parseInt(slice_day) == 4) && (parseInt(daysLeft) < 10 || parseInt(daysLeft) > 20)){
									day_name = names['days'][2];
								}else{
									day_name = names['days'][3];
								}
								var e_hrsLeft = (e_daysLeft - daysLeft)*24;
								var hrsLeft = Math.floor(e_hrsLeft);
								var slice_hours = String(hrsLeft).slice(-1);
								if(parseInt(slice_hours) == 1 && (parseInt(hrsLeft) < 10 || parseInt(hrsLeft) > 20)){
									hur_name = names['hours'][1];
								}else if((parseInt(slice_hours) == 2 || parseInt(slice_hours) == 3 || parseInt(slice_hours) == 4)  && (parseInt(hrsLeft) < 10 || parseInt(hrsLeft) > 20)){
									hur_name = names['hours'][2];
								}else{
									hur_name = names['hours'][3];
								}
								var e_minsLeft = (e_hrsLeft - hrsLeft)*60;
								var minsLeft = Math.floor(e_minsLeft);
								var slice_min = String(minsLeft).slice(-1);
								if(parseInt(slice_min) == 1 && (parseInt(minsLeft) < 10 || parseInt(minsLeft) > 20)){
									min_name = names['minutes'][1];
								}else if((parseInt(slice_min) == 2 || parseInt(slice_min) == 3 || parseInt(slice_min) == 4) && (parseInt(minsLeft) < 10 || parseInt(minsLeft) > 20)){
									min_name = names['minutes'][2];
								}else{
									min_name = names['minutes'][3];
								}
								var seksLeft = Math.floor((e_minsLeft - minsLeft)*60);
								if(seksLeft < 10){
									seksLeft = '0'+seksLeft;
								}
								var slice_sec = String(seksLeft).slice(-1);
								if(parseInt(slice_sec) == 1 && (parseInt(seksLeft) < 10 || parseInt(seksLeft) > 20)){
									sec_name = names['seconds'][1];
								}else if((parseInt(slice_sec) == 2 || parseInt(slice_sec) == 3 || parseInt(slice_sec) == 4) && (parseInt(seksLeft) < 10 || parseInt(seksLeft) > 20)){
									sec_name = names['seconds'][2];
								}else{
									sec_name = names['seconds'][3];
								}
								if (BigDay.getTime() > today.getTime() ){
									if (daysLeft <= 0) {
										if (minsLeft <= 0) {
											document.getElementById("countdown").innerHTML = hrsLeft+hur_name;
										} else {
											document.getElementById("countdown").innerHTML = hrsLeft+hur_name+minsLeft+min_name+seksLeft+sec_name;
										}
									} else {
										if (minsLeft <= 0) {
											document.getElementById("countdown").innerHTML = daysLeft+day_name+hrsLeft+hur_name;
										} else {
											document.getElementById("countdown").innerHTML = daysLeft+day_name+hrsLeft+hur_name+minsLeft+min_name+seksLeft+sec_name;
										}
									}
									if (daysLeft <= 0 && hrsLeft <= 0) {
										if (minsLeft <= 0) {
											document.getElementById("countdown").innerHTML = '';
										} else {
											document.getElementById("countdown").innerHTML = minsLeft+min_name+seksLeft+sec_name;
										}
									} else {
										if (minsLeft <= 0) {
											document.getElementById("countdown").innerHTML = daysLeft+day_name+hrsLeft+hur_name;
										} else {
											document.getElementById("countdown").innerHTML = daysLeft+day_name+hrsLeft+hur_name+minsLeft+min_name+seksLeft+sec_name;
										}
									}
								}
							}
							setInterval("countdown_timer()", 100);
						//--></script>
					{% endif %} 
					{% endif %} 
					{% if (points) %} 
					<div class="reward-product">{{ text_points }} <span class="pr_points">{{ points }}</span></div>
					{% endif %} 
					<link itemprop="availability" href="http://schema.org/{{ quantity > 0?"InStock":"OutOfStock" }}" />
					<meta itemprop="priceCurrency" content="{{ currency_code }}">
				  </div>
				{% else %} 
				<div class="list-unstyled">{{ text_catalog_price_na_zakaz }}</div>
				{% endif %} 
				{% endif %} 
				{% if ((options and not revtheme_product_all['options_buy']) or not options_buy) %} 
				{% if (((price_number > 0 or zakaz_price_null) and (zakaz or quantity > 0 or predzakaz_button)) or rev_srav_prod or rev_wish_prod or (popup_purchase and (price_number > 0 or zakaz_price_null) and (zakaz or quantity > 0))) %} 
					
						{% if ((price_number > 0 or zakaz_price_null) and (zakaz or quantity > 0)) %} 
							{% if (quantity < 1 and predzakaz_button) %} 
								<div class="pop_left">
									<button type="button" id="button-cart" onclick="get_revpopup_predzakaz({{ product_id }});"><i class="fa fa-shopping-basket predzakaz"></i>{{ text_predzakaz }}</button>
								</div>
							{% else %} 
								<div class="pop_left">
									{% if product_in_cart %}
									  <button type="button" id="button-cart" class="btn-cart in-cart"><i class="fa fa-shopping-basket"></i>В корзине</button>
									{% else %}
									  <button type="button" id="button-cart" class="btn-cart add-to-cart" data-product-id="{{ product_id }}" data-action="product" data-loading-text="{{ text_loading }}" class="btn btn-primary btn-lg"><i class="fa fa-shopping-basket"></i>{{ button_cart }}</button>
									{% endif %}
								</div>
							{% endif %} 
						{% else %} 
							{% if (predzakaz_button) %} 
								<div class="pop_left">
									<button type="button" id="button-cart" onclick="get_revpopup_predzakaz({{ product_id }});"><i class="fa fa-shopping-basket predzakaz"></i>{{ text_predzakaz }}</button>
								</div>
							{% endif %} 
						{% endif %} 
						{% if (rev_wish_prod or popup_purchase) %} 
							<div class="pop_right {% if (columns_dd) %} {{ 'columns_dd' }} {% endif %}">
							{% if (popup_purchase and (price_number > 0 or zakaz_price_null) and (zakaz or quantity > 0)) %} 
								<a class="pop_ico quick-order-btn" data-product-id="{{ product_id }}"><i class='fa fa-border fa-gavel'></i><span class="hidden-xs hidden-md">{{ text_catalog_revpopup_purchase }}</span></a>
							{% endif %} 
							{% if (rev_wish_prod) %} 
								<a class="{{ wishlist_class }} wishlist pjid_{{ product_id }} wishlist-toggle" data-toggle="tooltip" data-product-id="{{ product_id }}" title="{{ button_wishlist }}">
								  <i class="fa fa-border fa-heart"></i>
								</a>
							{% endif %} 
							</div>
						{% endif %} 

      					{% include 'revolution/template/product/partials/product_text_blocks.twig' %}

					
				{% endif %} 
			{% endif %} 
			</div>
			{% endif %}				
			

			{% include 'revolution/template/product/partials/stock_status.twig' with {'main_product': 'true'} %}
			
			</div>
			{% endif %} 
			{% if (discounts and not special) %} 
			<div class="discounts"{% if ((options and revtheme_product_all['options_buy']) and options_buy) %}style="padding: 0;"{% endif %}>
			<hr>
			{% for discount in discounts %} 
			<span>{{ discount['quantity'] }}{{ text_discount }}{{ discount['price'] }}</span><br/>
			{% endfor %} 
			</div>
			{% endif %} 
			{% if (minimum > 1) %} 
			<div class="clearfix"></div>
            <div class="alert alert-info"><i class="fa fa-info-circle"></i> {{ text_minimum }}<input type="hidden" class="minimumvalue" value="{{ minimum }}"></div>
            {% endif %} 
			

			{% include 'revolution/template/product/partials/product_accessories.twig' %}
        	</div>
		
		<div style="height: 20px; width: 100%; clear: both;"></div>
		{% include 'revolution/template/product/partials/product_tabs.twig' %}
		  

      </div>  
      
{{ content_bottom }} 
	{% include 'revolution/template/product/partials/viewed_products.twig' %}
	{% if tags %}
		<p>{{ text_tags }}
		{% for i in 0..tags|length %}
		{% if i < (tags|length - 1) %} <a href="{{ tags[i].href }}">{{ tags[i].tag }}</a>,
		{% else %} <a href="{{ tags[i].href }}">{{ tags[i].tag }}</a> {% endif %}
	{% endfor %} </p>
	{% endif %}


	{% include 'revolution/template/product/partials/related_products.twig' %}

{% endblock %}

{% block script %}
<script>
const productId = '{{ product_id }}'
// Функция, выполняемая после загрузки DOM
document.addEventListener('DOMContentLoaded', function() {
  // Показываем первую вкладку
  const firstTab = document.querySelector('.nav.nav-tabs li:first-child a');
  if (firstTab) {
    firstTab.click();
  }

  // Инициализация datepicker для элементов с классом .date
  const dateElements = document.querySelectorAll('.date');
  dateElements.forEach(el => {
    new DateTimePicker(el, {
      pickTime: false
    });
  });

  // Инициализация datetimepicker для элементов с классом .datetime
  const datetimeElements = document.querySelectorAll('.datetime');
  datetimeElements.forEach(el => {
    new DateTimePicker(el, {
      pickDate: true,
      pickTime: true
    });
  });

  // Инициализация timepicker для элементов с классом .time
  const timeElements = document.querySelectorAll('.time');
  timeElements.forEach(el => {
    new DateTimePicker(el, {
      pickDate: false
    });
  });

  // Загрузка отзывов при загрузке страницы
  const reviewContainer = document.getElementById('review');
  if (reviewContainer) {
    loadReviews(`index.php?route=product/product/review&product_id=${productId}`);
  }

  // Обработчик пагинации отзывов
  reviewContainer.addEventListener('click', function(e) {
    const paginationLink = e.target.closest('.pagination a');
    if (paginationLink) {
      e.preventDefault();
      fadeOutAndLoad(reviewContainer, paginationLink.href);
    }
  });

  // Обработчик отправки отзыва
  const reviewButton = document.getElementById('button-review');
  if (reviewButton) {
    reviewButton.addEventListener('click', submitReview);
  }

  // Обработчик отправки ответа на отзыв
  const answerButton = document.getElementById('button-answers');
  if (answerButton) {
    answerButton.addEventListener('click', submitAnswer);
  }
});

// Функция для плавного скрытия и загрузки контента
function fadeOutAndLoad(element, url) {
  element.style.opacity = '0';
  setTimeout(() => {
    loadContent(element, url);
    element.style.opacity = '1';
  }, 300);
}

// Функция загрузки контента
function loadContent(element, url) {
  fetch(url)
    .then(response => response.text())
    .then(html => {
      element.innerHTML = html;
    })
    .catch(error => console.error('Ошибка загрузки:', error));
}

// Функция загрузки отзывов
function loadReviews(url) {
  const reviewContainer = document.getElementById('review');
  if (reviewContainer) {
    loadContent(reviewContainer, url);
  }
}

// Функция отправки отзыва
function submitReview() {
  const form = document.querySelector('.form-review');
  const button = document.getElementById('button-review');
  const productId = '{{ product_id }}';
  
  if (!form || !button) return;

  button.disabled = true;
  
  const formData = new FormData(form);
  formData.append('product_id', productId);

  fetch(`index.php?route=product/product/write&product_id=${productId}`, {
    method: 'POST',
    body: new URLSearchParams(formData)
  })
  .then(response => response.json())
  .then(json => {
    // Удаляем предыдущие уведомления
    document.querySelectorAll('.alert-success, .alert-danger').forEach(el => el.remove());

    if (json.error) {
      showNotification('alert-danger', '{{ text_product_oshibka }}', json.error);
    }

    if (json.success) {
      showNotification('alert-success', '{{ text_product_spasibo_otz }}', json.success);
      resetReviewForm();
    }
  })
  .catch(error => console.error('Ошибка:', error))
  .finally(() => {
    button.disabled = false;
  });
}

// Функция отправки ответа на отзыв
function submitAnswer() {
  const form = document.querySelector('.form-answers');
  const button = document.getElementById('button-answers');
  const productId = '{{ product_id }}';
  
  if (!form || !button) return;

  button.disabled = true;
  
  const formData = new FormData(form);
  formData.append('product_id', productId);

  fetch(`index.php?route=revolution/revstorereview/writeanswer&product_id=${productId}`, {
    method: 'POST',
    body: new URLSearchParams(formData)
  })
  .then(response => response.json())
  .then(json => {
    document.querySelectorAll('.alert-success, .alert-danger').forEach(el => el.remove());

    if (json.error) {
      showNotification('alert-danger', '{{ text_product_oshibka }}', json.error);
    }

    if (json.success) {
      showNotification('alert-success', '{{ text_product_spasibo_answer }}', json.success);
      resetAnswerForm();
    }
  })
  .catch(error => console.error('Ошибка:', error))
  .finally(() => {
    button.disabled = false;
  });
}

// Функция показа уведомления
function showNotification(className, title, message) {
  const notification = document.createElement('div');
  notification.className = `alert ${className}`;
  notification.innerHTML = `<strong>${title}</strong> ${message}`;
  document.body.insertBefore(notification, document.body.firstChild);
}

// Функция сброса формы отзыва
function resetReviewForm() {
  document.querySelector('input[name="name"]').value = '';
  document.querySelector('textarea[name="text"]').value = '';
  document.querySelectorAll('input[name="rating"]:checked').forEach(el => el.checked = false);
  
  const postReviewBox = document.getElementById('post-review-box');
  const newReview = document.getElementById('new-review');
  const openReviewBox = document.getElementById('open-review-box');
  const closeReviewBox = document.getElementById('close-review-box');
  const ratingsHidden = document.getElementById('ratings-hidden');
  const stars = document.querySelectorAll('.stars .glyphicon');
  
  if (postReviewBox) postReviewBox.style.display = 'none';
  if (newReview) newReview.focus();
  if (openReviewBox) openReviewBox.style.display = 'block';
  if (closeReviewBox) closeReviewBox.style.display = 'none';
  if (ratingsHidden) ratingsHidden.value = '';
  
  stars.forEach(star => {
    star.classList.remove('glyphicon-star');
    star.classList.add('glyphicon-star-empty');
  });
}

// Функция сброса формы ответа
function resetAnswerForm() {
  document.querySelector('input[name="name_answer"]').value = '';
  document.querySelector('textarea[name="text_answer"]').value = '';
  
  const postAnswersBox = document.getElementById('post-answers-box');
  const newAnswers = document.getElementById('new-answers');
  const openAnswersBox = document.getElementById('open-answers-box');
  const closeAnswersBox = document.getElementById('close-answers-box');
  
  if (postAnswersBox) postAnswersBox.style.display = 'none';
  if (newAnswers) newAnswers.focus();
  if (openAnswersBox) openAnswersBox.style.display = 'block';
  if (closeAnswersBox) closeAnswersBox.style.display = 'none';
}

// Функция обновления цен продукта
function update_prices_product(product_id, minimumvalue) {
  const quantity = 1;
  const formElements = document.querySelectorAll('.product-info.product_informationss input[type="text"], .product-info.product_informationss input[type="hidden"], .product-info.product_informationss input[type="radio"]:checked, .product-info.product_informationss input[type="checkbox"]:checked, .product-info.product_informationss select, .product-info.product_informationss textarea');
  
  const formData = new FormData();
  formElements.forEach(el => {
    if (el.name) {
      formData.append(el.name, el.value);
    }
  });
  
  formData.append('product_id', product_id);
  formData.append('quantity', quantity);
  
  fetch('index.php?route=product/product/update_prices', {
    method: 'POST',
    body: formData
  })
  .then(response => response.json())
  .then(json => {
    document.querySelectorAll('.product_informationss .pr_quantity').forEach(el => {
      el.textContent = number_format(json.option_quantity, product_id);
    });
    
    document.querySelectorAll('.product_informationss .pr_points').forEach(el => {
      el.textContent = number_format(json.points, product_id);
    });
    
    document.querySelectorAll('.product_informationss .pr_model').forEach(el => {
      el.textContent = json.opt_model;
    });
    
    document.querySelectorAll('.product_informationss .update_price, .product_informationss .update_special').forEach(el => {
      el.textContent = price_format(json.special_n);
    });
  })
  .catch(error => console.error('Ошибка:', error));
}

// Функция форматирования цены
function price_format(n) {
  const c = {{ currency['decimals'] is empty ? "0" : currency['decimals'] }};
  const d = '{{ currency['decimal_point'] }}';
  const t = '{{ currency['thousand_point'] }}';
  const s_left = '{{ currency['symbol_left'] }}';
  const s_right = '{{ currency['symbol_right'] }}';
  n = n * {{ currency['value'] }};
  
  let i = parseInt(n = Math.abs(n).toFixed(c)) + ''; 
  let j = (i.length > 3) ? i.length % 3 : 0; 
  
  return s_left + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '') + s_right; 
}

// Функция форматирования числа
function number_format(n, product_id) {
  return parseInt(Math.abs(n).toFixed(0)) + ''; 
}

// Функция для обновления опций при покупке в один клик
{% if (revtheme_product_all['options_buy_click']) %} 
function update_options_buy(product_id, opt_id, option) {
  const optionInput = document.querySelector(`.product-info.product_informationss .options_buy .pro_${option} input[name="option[${opt_id}]"]`);
  if (optionInput) {
    optionInput.value = option;
  }
  
  const formElements = document.querySelectorAll(`.product-info.product_informationss .options_buy .pro_${option} input[type="text"], .product-info.product_informationss .options_buy .pro_${option} input[type="hidden"], .product-info.product_informationss .options_buy .pro_${option} input[type="radio"]:checked, .product-info.product_informationss .options_buy .pro_${option} input[type="checkbox"]:checked, .product-info.product_informationss .options_buy .pro_${option} select, .product-info.product_informationss .options_buy .pro_${option} textarea`);
  
  const formData = new FormData();
  formElements.forEach(el => {
    if (el.name) {
      formData.append(el.name, el.value);
    }
  });
  
  formData.append('product_id', product_id);
  
  fetch('index.php?route=product/product/update_prices', {
    method: 'POST',
    body: formData
  })
  .then(response => response.json())
  .then(json => {
    document.querySelectorAll('.product_informationss .pr_quantity').forEach(el => {
      el.textContent = number_format(json.option_quantity, product_id);
    });
    
    {% if (points) %} 
    document.querySelectorAll('.product_informationss .pr_points').forEach(el => {
      el.textContent = number_format(json.points, product_id);
    });
    {% endif %} 
    
    {% if (model_status) %} 
    document.querySelectorAll('.product_informationss .pr_model').forEach(el => {
      el.textContent = json.opt_model;
    });
    {% endif %} 
  })
  .catch(error => console.error('Ошибка:', error));
}
{% endif %} 
</script>
{% endblock %}

